require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {{
    id: '1',
    provider: "facebook",
    uid: "883752575071021",
    name: "alebr28@hotmail.com",
    image: "http://graph.facebook.com/883752575071021/picture",
    token: "CAACuAWK5tJABAAuHm5Hv6ZCtQHUn4s1VGq6NyHe6pcaY9PRDH...",
    expires_at: "2016-01-21 21:21:17",
    review_id: '1',
    created_at: "2015-11-22 22:53:31",
    updated_at: "2015-11-22 22:53:31",
    email: "alebr28@hotmail.com"

  }}


  let(:invalid_attributes) {{
    id: '2',
    provider: "facebook",
    uid: "883752575071021",
    name: "alebr28@hotmail.com",
    image: "http://graph.facebook.com/883752575071021/picture",
    token: "CAACuAWK5tJABAAuHm  5Hv6ZCtQHUn4s1VGq6NyHe6pcaY9PRDH...",
    expires_at: "2016-01-21 21:21:17",
    review_id: "11",
    created_at: "2015-11-22 22:53:31",
    updated_at: "2015-11-22 22:53:31",
    email: "alebr28@hotmail.com"
  }}

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    before do
      User.destroy_all
    end
    it "assigns all users as @users" do
      user = User.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:users)).to eq([user])
    end
  end

  describe "GET #show" do
    it "assigns the requested user as @user" do
      user = User.create! valid_attributes
      get :show, {:id => user.to_param}, valid_session
      expect(assigns(:user)).to eq(user)
    end
  end

  describe "GET #new" do
    it "assigns a new user as @user" do
      get :new, {}, valid_session
      expect(assigns(:user)).to be_a_new(User)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new User" do
        expect {
          post :create, {:user => valid_attributes}, valid_session
        }.to change(User, :count).by(1)
      end

      it "assigns a newly created user as @user" do
        post :create, {:user => valid_attributes}, valid_session
        expect(assigns(:user)).to be_a(User)
        expect(assigns(:user)).to be_persisted
      end

      it "redirects to the created user" do
        post :create, {:user => valid_attributes}, valid_session
        expect(response).to redirect_to(User.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved user as @user" do
        get :new, {:user => invalid_attributes}, valid_session
        expect(assigns(:user)).to be_a_new(User)
      end

      it "re-renders the 'new' template" do
        post :create, {:user => invalid_attributes}, valid_session
        expect(response).to redirect_to(User.last)
      end
    end
  end
end
