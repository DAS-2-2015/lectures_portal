require 'rails_helper'
# It demonstrates how one might use RSpec to specify the controller code that
# This spec was generated by rspec-rails when you ran the scaffold generator.
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LecturesController, type: :controller do
  login_user

  # This should return the minimal set of attributes required to create a valid
  # Lecture. As you add validations to Lecture, be sure to
  # adjust the attributes here as well.
  before(:all){
    FactoryGirl.build(:user)
  }

  after(:all){
    User.destroy_all
  }


  let(:lecture){FactoryGirl.create(:lecture)}

  let(:valid_attributes) { {
    } }

  let(:invalid_attributes) { {
    "title" => "My String",
    "description" => "My String",
    "duration" => 1,
    "price" => "asdhaush",
    "date" => "2015-11-21 00:07:16",
    "created_at" => "2015-11-21 00:07:16",
    "updated_at" => "2015-11-21 00:07:16",
    "speaker_id" => 1

    FactoryGirl.create(:user)
  }
  let(:lecture){FactoryGirl.create(:lecture)}

  let(:valid_attributes) { {
    "title" => "My String",
    "description" => "My String",
    "duration" => "1",
    "date" => "2015-11-08 13:04:53"
    } }

  let(:invalid_attributes) { {
    "title" => "123123",
    "description" => "2312",
    "duration" => "asda",
    "date" => "asduhasdh"
    } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LecturesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all lectures as @lectures" do
      get :index, {}, valid_session
      expect(assigns(:lectures)).to eq([lecture])
    end
  end

  describe "GET #show" do
    it "assigns the requested lecture as @lecture" do
      get :show, {:id => lecture.to_param}, valid_session
      expect(assigns(:lecture)).to eq(lecture)
    end
  end

  describe "GET #new" do
    it "assigns a new lecture as @lecture" do
      get :new, {}, valid_session
      expect(assigns(:lecture)).to be_a_new(Lecture)
    end
  end

  describe "GET #edit" do
    it "assigns the requested lecture as @lecture" do
      get :edit, {:id => lecture.to_param}, valid_session
      expect(assigns(:lecture)).to eq(lecture)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Lecture" do
        expect {
          post :create, {:lecture => FactoryGirl.attributes_for(:lecture)}, valid_session

        }.to change(Lecture, :count).by(1)
      end

      it "assigns a newly created lecture as @lecture" do

        post :create, {:lecture => FactoryGirl.attributes_for(:lecture)}, valid_session
        expect(assigns(:lecture)).to be_a(Lecture)
        expect(assigns(:lecture)).to be_persisted
      end

      it "redirects to the created lecture" do
        post :create, {:lecture => FactoryGirl.attributes_for(:lecture)}, valid_session
        expect(response).to redirect_to(Lecture.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved lecture as @lecture" do
        post :create, {:lecture => invalid_attributes}, valid_session
        expect(assigns(:lecture)).to be_a_new(Lecture)
      end

      it "re-renders the 'new' template" do
        post :create, {:lecture => invalid_attributes}, valid_session
        expect(response).to render_template(show)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      it "updates the requested lecture" do
        put :update, {:id => lecture.to_param, :lecture => FactoryGirl.attributes_for(:lecture_update)}, valid_session
        lecture.reload
        expect(lecture.duration).to eq(2)
      end

      it "assigns the requested lecture as @lecture" do
        put :update, {:id => lecture.to_param, :lecture => FactoryGirl.attributes_for(:lecture)}, valid_session
        expect(assigns(:lecture)).to eq(lecture)
      end

      it "redirects to the lecture" do
        put :update, {:id => lecture.to_param, :lecture => FactoryGirl.attributes_for(:lecture)}, valid_session
        expect(response).to redirect_to(lecture)
      end
    end

    context "with invalid params" do
      it "assigns the lecture as @lecture" do
        put :update, {:id => lecture.to_param, :lecture => invalid_attributes}, valid_session
        expect(assigns(:lecture)).to eq(lecture)
      end

      it "re-renders the 'edit' template" do
        put :update, {:id => lecture.to_param, :lecture => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested lecture" do
      expect {
        delete :destroy, {:id => lecture.to_param}, valid_session
      }.to change(Lecture, :count).by(-1)
    end

    it "redirects to the lectures list" do
      delete :destroy, {:id => lecture.to_param}, valid_session
      expect(response).to redirect_to(lectures_url)
    end
  end

end
